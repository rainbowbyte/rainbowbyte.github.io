(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[31],{

/***/ 463:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm-browser.js
var vue_esm_browser = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist/templateLoader.js??ref--6!./node_modules/vue-loader/dist??ref--2-0!./website/md-loader!./website/docs/i18n.md?vue&type=template&id=408ae888

var _hoisted_1 = {
  class: "content element-doc"
};

var _hoisted_2 = /*#__PURE__*/Object(vue_esm_browser["m" /* createStaticVNode */])("<h2 id=\"guo-ji-hua\"><a class=\"header-anchor\" href=\"#guo-ji-hua\">¶</a> 国际化</h2><p>Rainbowbyte UI 组件内部默认使用英语，若希望使用其他语言，则需要进行多语言设置。以中文为例，在 main.js 中，如果是完整引入 Rainbowbyte UI：</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> RainbowbyteUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui&#39;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#39;dayjs/locale/zh-cn&#39;</span>\n<span class=\"hljs-keyword\">import</span> locale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/zh-cn&#39;</span>\n\ncreateApp(App).use(RainbowbyteUI, { locale })\n</code></pre><p>如果是通过 <strong>es modules</strong> 按需引入 Rainbowbyte UI:</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { RuButton, locale } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui&#39;</span>\n<span class=\"hljs-keyword\">import</span> lang <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/zh-cn&#39;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#39;dayjs/locale/zh-cn&#39;</span>\n\nlocale(lang)\ncreateApp(App).component(RuButton.name, RuButton)\n</code></pre><p>如果是通过 <code>babel-plugin-component</code> 插件按需引入 Rainbowbyte UI:</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { RuButton, RuSelect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui&#39;</span>\n<span class=\"hljs-keyword\">import</span> lang <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/zh-cn&#39;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#39;dayjs/locale/zh-cn&#39;</span>\n<span class=\"hljs-keyword\">import</span> locale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale&#39;</span>\n\n<span class=\"hljs-comment\">// 设置语言</span>\nlocale.use(lang)\n\n<span class=\"hljs-comment\">// 引入组件</span>\ncreateApp(App).component(RuButton.name, RuButton)\ncreateApp(App).component(RuSelect.name, RuSelect)\n</code></pre><h3 id=\"she-zhi-day.js-guo-ji-hua\"><a class=\"header-anchor\" href=\"#she-zhi-day.js-guo-ji-hua\">¶</a> 设置 Day.js 国际化</h3><p>Rainbowbyte UI 直接使用了 <a href=\"https://day.js.org/\">Day.js</a> 项目的时间日期国际化设置，如月份名称、每周第一天是周几等。并且会自动全局设置已经导入的 Day.js 国际化配置。</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> locale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/zh-cn&#39;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#39;dayjs/locale/zh-cn&#39;</span>\n\n<span class=\"hljs-comment\">// 将自动设置 Day.js 的国际化设置为 &#39;zh-cn&#39;</span>\napp.use(RainbowbyteUI, { locale })\n</code></pre><p>当然，如果有需要，你也可以手动设置成其他 Day.js 国际化配置</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#39;dayjs/locale/fr&#39;</span>\ndayjs.locale(<span class=\"hljs-string\">&#39;fr&#39;</span>)\n</code></pre><p>如果使用其它语言，默认情况下英文语言包依旧是被引入的，可以使用 webpack 的 NormalModuleReplacementPlugin 替换默认语言包。</p><p><strong>webpack.config.js</strong></p><pre><code class=\"hljs language-typescript\">{\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> webpack.NormalModuleReplacementPlugin(\n      <span class=\"hljs-regexp\">/rainbowbyte-ui[\\/\\\\]lib[\\/\\\\]locale[\\/\\\\]lang[\\/\\\\]en/</span>,\n      <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/zh-cn&#39;</span>,\n    ),\n  ]\n}\n</code></pre><h3 id=\"jian-rong-vue-i18n-9.x\"><a class=\"header-anchor\" href=\"#jian-rong-vue-i18n-9.x\">¶</a> 兼容 <code>vue-i18n@9.x</code></h3><p>如果需要查看 <a href=\"https://vue-i18n-next.intlify.dev/guide/#html\">VueI18n的文档</a>, 请点击这个链接去查看</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { createI18n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-i18n&#39;</span>\n<span class=\"hljs-keyword\">import</span> RainbowbyteUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui&#39;</span>\n<span class=\"hljs-keyword\">import</span> enLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/en&#39;</span>\n<span class=\"hljs-keyword\">import</span> zhLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/zh-cn&#39;</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>\n\n<span class=\"hljs-keyword\">const</span> messages = {\n  [enLocale.name]: {\n    <span class=\"hljs-comment\">// ru 这个属性很关键，一定要保证有这个属性，</span>\n    <span class=\"hljs-attr\">ru</span>: enLocale.ru,\n    <span class=\"hljs-comment\">// 定义您自己的字典，但是请不要和 `ru` 重复，这样会导致 RainbowbyteUI 内部组件的翻译失效.</span>\n    <span class=\"hljs-attr\">message</span>: {\n      <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;hello world&#39;</span>,\n    },\n  },\n  [zhLocale.name]: {\n    <span class=\"hljs-attr\">ru</span>: zhLocale.ru,\n    <span class=\"hljs-comment\">// 定义您自己的字典，但是请不要和 `ru` 重复，这样会导致 RainbowbyteUI 内部组件的翻译失效.</span>\n    <span class=\"hljs-attr\">message</span>: {\n      <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;你好，世界&#39;</span>,\n    },\n  },\n  <span class=\"hljs-attr\">testLocale</span>: {\n    <span class=\"hljs-attr\">ru</span>: {},\n    <span class=\"hljs-comment\">// 没有定义 message 字段，会 fallback 回到 en 去, fallbackLocale 的定义在下方 👇</span>\n  },\n}\n\n<span class=\"hljs-keyword\">const</span> i18n = createI18n({\n  <span class=\"hljs-attr\">locale</span>: zhLocale.name,\n  <span class=\"hljs-attr\">fallbackLocale</span>: enLocale.name,\n  messages,\n})\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\n\napp.use(RainbowbyteUI, {\n  <span class=\"hljs-attr\">i18n</span>: i18n.global.t,\n})\n\n<span class=\"hljs-comment\">// 要记得使用这个插件.</span>\napp.use(i18n)\n</code></pre><h3 id=\"jian-rong-qi-ta-i18n-cha-jian\"><a class=\"header-anchor\" href=\"#jian-rong-qi-ta-i18n-cha-jian\">¶</a> 兼容其他 i18n 插件</h3><p>如果不使用 <code>vue-i18n@9.x</code>，而是用其他的 i18n 插件，Rainbowbyte UI 将无法兼容，但是可以自定义 Rainbowbyte UI 的 i18n 的处理方法。</p><div class=\"tip\"><p>一旦设置了这个方法，RainbowbyteUI 内置的翻译功能就会失效，会使用用户定义的翻译功能，所以一定要确保翻译方法能够正确的翻译 \b <code>ru.scope.subName</code> 的格式，如果自定义的方法无法翻译 <code>ru.select.noData</code> 的格式，将会使组件的文本失效.</p></div><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> RainbowbyteUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui&#39;</span>\n<span class=\"hljs-keyword\">import</span> enLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/en&#39;</span>\n<span class=\"hljs-keyword\">import</span> zhLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/zh-cn&#39;</span>\n\n<span class=\"hljs-comment\">// 这是 i18n 函数的函数签名.</span>\n<span class=\"hljs-keyword\">type</span> i18n = <span class=\"hljs-function\">(<span class=\"hljs-params\">...args: <span class=\"hljs-built_in\">any</span>[]</span>) =&gt;</span> <span class=\"hljs-built_in\">string</span>\nVue.use(Element, {\n  <span class=\"hljs-attr\">i18n</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">path, options</span>) </span>{\n    <span class=\"hljs-comment\">// ...</span>\n  },\n  <span class=\"hljs-comment\">// others.</span>\n})\n</code></pre><h3 id=\"an-xu-jia-zai-li-ding-zhi-i18n\"><a class=\"header-anchor\" href=\"#an-xu-jia-zai-li-ding-zhi-i18n\">¶</a> 按需加载里定制 i18n</h3><p>\b如果您需要按需加载翻译文件，请查看<a href=\"https://vue-i18n-next.intlify.dev/guide/advanced/lazy.html\">按需加载</a></p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { createI18n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-i18n&#39;</span>\n<span class=\"hljs-keyword\">import</span> RainbowbyteUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui&#39;</span>\n<span class=\"hljs-keyword\">import</span> enLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/en&#39;</span>\n<span class=\"hljs-keyword\">import</span> zhLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale/lang/zh-cn&#39;</span>\n<span class=\"hljs-keyword\">import</span> RainbowbyteUILocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;rainbowbyte-ui/lib/locale&#39;</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>\n\n<span class=\"hljs-keyword\">const</span> messages = {\n  [enLocale.name]: {\n    <span class=\"hljs-comment\">// ru 这个属性很关键，一定要保证有这个属性，</span>\n    <span class=\"hljs-attr\">ru</span>: enLocale.ru,\n    <span class=\"hljs-comment\">// 定义您自己的字典，但是请不要和 `ru` 重复，这样会导致 RainbowbyteUI 内部组件的翻译失效.</span>\n    <span class=\"hljs-attr\">message</span>: {\n      <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;hello world&#39;</span>,\n    },\n  },\n  [zhLocale.name]: {\n    <span class=\"hljs-attr\">ru</span>: zhLocale.ru,\n    <span class=\"hljs-comment\">// 定义您自己的字典，但是请不要和 `ru` 重复，这样会导致 RainbowbyteUI 内部组件的翻译失效.</span>\n    <span class=\"hljs-attr\">message</span>: {\n      <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;你好，世界&#39;</span>,\n    },\n  },\n  <span class=\"hljs-attr\">testLocale</span>: {\n    <span class=\"hljs-attr\">ru</span>: {},\n    <span class=\"hljs-comment\">// 没有定义 message 字段，会 fallback 回到 en 去, fallbackLocale 的定义在下方 👇</span>\n  },\n}\n\n<span class=\"hljs-keyword\">const</span> i18n = createI18n({\n  <span class=\"hljs-attr\">locale</span>: zhLocale.name,\n  <span class=\"hljs-attr\">fallbackLocale</span>: enLocale.name,\n  messages,\n})\n\nRainbowbyteUILocale.i18n(i18n.global.t)\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\napp.use(i18n)\n</code></pre>", 25);

function render(_ctx, _cache) {
  var _component_right_nav = Object(vue_esm_browser["O" /* resolveComponent */])("right-nav");

  return Object(vue_esm_browser["F" /* openBlock */])(), Object(vue_esm_browser["j" /* createBlock */])("section", _hoisted_1, [_hoisted_2, Object(vue_esm_browser["o" /* createVNode */])(_component_right_nav)]);
}
// CONCATENATED MODULE: ./website/docs/i18n.md?vue&type=template&id=408ae888

// CONCATENATED MODULE: ./website/docs/i18n.md

const script = {}
script.render = render

/* harmony default export */ var i18n = __webpack_exports__["default"] = (script);

/***/ })

}]);